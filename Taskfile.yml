version: '3'

vars:
  COMPOSE_FILE: docker-compose.dev.yml

tasks:
  docker:up:
    desc: DB/Adminer をバックグラウンド起動
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} up -d db adminer

  docker:down:
    desc: DB/Adminer を停止
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} down --remove-orphans

  dev:
    desc: コンテナ上でフロント・API(Express)・DBをまとめて起動
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} up --build

  dev:detach:
    desc: バックグラウンドで開発環境を起動
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} up -d

  stop:
    desc: 開発用コンテナを停止
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} down

  clean:
    desc: 停止と同時にボリュームも削除
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} down -v

  logs:
    desc: 開発コンテナのログをフォロー
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} logs -f

  install:
    desc: 依存関係のみ事前にインストール
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} run --rm app bash -lc "PNPM_YES=true pnpm install --frozen-lockfile"

  shell:
    desc: appコンテナでシェルを開く
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} exec app bash

  ci:
    desc: CI相当 (lint/typecheck/test/build) を Docker 上で実行
    cmds:
      - defer: docker compose -f {{.COMPOSE_FILE}} down --remove-orphans
      - docker compose -f {{.COMPOSE_FILE}} up -d db
      - docker compose -f {{.COMPOSE_FILE}} run --rm app bash -lc "pnpm install --frozen-lockfile && pnpm lint && pnpm typecheck && pnpm test && pnpm build"

  prod:test:
    desc: 本番ビルドを生成しローカル環境でヘルスチェック
    cmds:
      - |
        bash -lc '
          set -euo pipefail
          export PORT="${PORT:-8080}"
          export DATABASE_URL="${DATABASE_URL:-postgresql://postgres:postgres@localhost:5432/app?sslmode=disable}"

          pnpm build

          node dist/server/index.js &
          pid=$!
          trap "kill $pid >/dev/null 2>&1 || true" EXIT

          success=false
          for _ in $(seq 1 20); do
            if curl -fsS "http://127.0.0.1:${PORT}/api/health" >/dev/null; then
              success=true
              break
            fi
            sleep 1
          done

          kill $pid >/dev/null 2>&1 || true
          wait $pid >/dev/null 2>&1 || true

          if [ "${success}" = true ]; then
            echo "Health check OK (http://127.0.0.1:${PORT}/api/health)"
            exit 0
          fi

          echo "Health check failed" >&2
          exit 1
        '

  db:generate:
    desc: drizzle-kit generate (コンテナ起動中に実行)
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} up -d db
      - docker compose -f {{.COMPOSE_FILE}} run --rm app pnpm db:generate

  db:migrate:
    desc: drizzle-kit migrate (コンテナ起動中に実行)
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} up -d db
      - docker compose -f {{.COMPOSE_FILE}} run --rm app pnpm db:migrate

  db:studio:
    desc: drizzle-kit studio を起動
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} up -d db
      - docker compose -f {{.COMPOSE_FILE}} run --rm --service-ports app pnpm db:studio

  db:seed:
    desc: サンプルデータを投入
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} up -d db
      - docker compose -f {{.COMPOSE_FILE}} run --rm app pnpm tsx server/scripts/seed.ts

  test:api:
    desc: ローカルPostgreSQLで API 統合テストを実行
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} up -d db
      - |
        bash -lc '
          export DATABASE_URL="postgresql://postgres:postgres@127.0.0.1:5432/app?sslmode=disable"
          pnpm test:api
        '

  test:e2e:
    desc: Playwright E2E テスト（Docker 開発環境利用）
    cmds:
      - defer: task stop
      - task: dev:detach
      - |
        bash -lc '
          echo "Waiting for http://localhost:5173 ..."
          for i in $(seq 1 120); do
            if curl -fsS http://localhost:5173 >/dev/null 2>&1; then
              echo "Frontend is reachable."
              exit 0
            fi
            sleep 2
          done
          echo "Timed out waiting for http://localhost:5173" >&2
          exit 1
        '
      - |
        docker compose -f {{.COMPOSE_FILE}} exec app bash -lc '
          for i in $(seq 1 60); do
            if curl -fsS http://localhost:3000/api/health >/dev/null 2>&1; then
              exit 0
            fi
            sleep 2
          done
          echo "Timed out waiting for API health" >&2
          exit 1
        '
      - pnpm exec playwright install --with-deps
      - pnpm test:e2e

  precheck:
    desc: コミット前に実行する検証（lint/typecheck/unit）
    cmds:
      - PNPM_YES=true pnpm install --frozen-lockfile
      - pnpm lint
      - pnpm typecheck
      - pnpm test
